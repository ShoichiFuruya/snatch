---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  for snatch test

Parameters:
  AppName:
    Type: String
    Default: "snatch"
    Description: ""
  Env:
    Type: String
    Default: "test"
    Description: ""
  ImageId:
    Type: "AWS::EC2::Image::Id"
    Default: "ami-0cd744adeca97abb1"
    Description: "Ubuntu Server 18.04 LTS (HVM), SSD Volume Type"
  InstanceType:
    Type: String
    Default: t3.small
    Description: "Set LaunchTemplate"
  InstanceType1:
    Type: String
    Default: t3.micro
    Description: "Set AutoScaling SpotFleet Type"
  InstanceType2:
    Type: String
    Default: t3.nano
    Description: "Set AutoScaling SpotFleet Type"
  InstanceNum:
    Type: String
    Default: 2
    Description: ""

Mappings:
  AZRegions:
    ap-northeast-1:
      AZs: ["a", "c", "d"]

Resources:
  # VPC
  Vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Env}-vpc"

  # subnets
  SubnetPub1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: "10.0.0.0/25"
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Env}-pub-mono-subnet"
  SubnetPub2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: "10.0.1.0/25"
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Env}-pub-di-subnet"
  SubnetPub3:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 2, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: "10.0.2.0/25"
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Env}-pub-tri-subnet"
  SubnetPri1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: "10.0.0.128/25"
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Env}-pri-mono-subnet"
  SubnetPri2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: "10.0.1.128/25"
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Env}-pri-di-subnet"
  SubnetPri3:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 2, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: "10.0.2.128/25"
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Env}-pri-tri-subnet"

  # InternetGateway
  Igw:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Env}-igw"
  Gw:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref Igw

  # DHCP
  Dopt:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName: !Sub "${AWS::Region}.compute.internal"
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Env}-dopt"
  DhcpAssoc:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      VpcId: !Ref Vpc
      DhcpOptionsId: !Ref Dopt

  # Network acl
  NetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref Vpc
  Acl1:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref NetworkAcl
  Acl2:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref NetworkAcl

  # Subnet acl
  SubnetAcl1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
       NetworkAclId: !Ref NetworkAcl
       SubnetId: !Ref SubnetPub1
  SubnetAcl2:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
       NetworkAclId: !Ref NetworkAcl
       SubnetId: !Ref SubnetPub2
  SubnetAcl3:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref SubnetPub3
  SubnetAcl4:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
       NetworkAclId: !Ref NetworkAcl
       SubnetId: !Ref SubnetPri1
  SubnetAcl5:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
       NetworkAclId: !Ref NetworkAcl
       SubnetId: !Ref SubnetPri2
  SubnetAcl6:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref SubnetPri3

  # Route table
  RtbPub:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Env}-pub-rtb"
  RtbPri:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Env}-pri-rtb"

  # Subnet route table
  SubnetRoute1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RtbPub
      SubnetId: !Ref SubnetPub1
  SubnetRoute2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RtbPub
      SubnetId: !Ref SubnetPub2
  SubnetRoute3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RtbPub
      SubnetId: !Ref SubnetPub3
  SubnetRoute4:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RtbPri
      SubnetId: !Ref SubnetPri1
  SubnetRoute5:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RtbPri
      SubnetId: !Ref SubnetPri2
  SubnetRoute6:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RtbPri
      SubnetId: !Ref SubnetPri3

  # Routing
  Route:
    Type: "AWS::EC2::Route"
    DependsOn: Gw
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RtbPub
      GatewayId: !Ref Igw

  # IAM Role
  Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      RoleName: !Sub "${AppName}-${Env}-iam-role"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref Role

  # SecurityGroup
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow ssh(22)"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "10.0.0.0/16"

  # LaunchTemplate
  LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: "/dev/sda1"
            Ebs:
              DeleteOnTermination: true
              VolumeType: "gp2"
              VolumeSize: 8
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        KeyName: !Ref AppName
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/sh -x

            apt update -y
            apt install -y unzip python-pip

            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            cp -a /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
            chmod u+x /etc/init.d/cfn-hup

            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource AutoScalingGroup

            reboot

  # AutoScalingGroup
  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 50
      ResourceSignal:
        Count: !Ref InstanceNum
        Timeout: "PT5M"
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: True
    Properties:
      AvailabilityZones:
        - Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
        - Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
        - Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 2, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      Cooldown: "60"
      DesiredCapacity: !Ref InstanceNum
      HealthCheckGracePeriod: 60
      HealthCheckType: "EC2"
      MaxSize: !Ref InstanceNum
      MetricsCollection:
        - Granularity: "1Minute"
      MinSize: !Ref InstanceNum
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity: 0
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !Ref InstanceType
            - InstanceType: !Ref InstanceType1
            - InstanceType: !Ref InstanceType2
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Env}-pub-ec2"
          PropagateAtLaunch: true
        - Key: Role
          Value: !Ref Env
          PropagateAtLaunch: true
      TerminationPolicies:
        - OldestInstance
      VPCZoneIdentifier:
        - !Ref SubnetPub1
        - !Ref SubnetPub2
        - !Ref SubnetPub3
